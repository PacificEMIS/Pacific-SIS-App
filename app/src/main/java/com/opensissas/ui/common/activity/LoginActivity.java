package com.opensissas.ui.common.activity;

import static com.tozny.crypto.android.AesCbcWithIntegrity.encrypt;
import static com.tozny.crypto.android.AesCbcWithIntegrity.generateKeyFromPassword;

import androidx.appcompat.app.AppCompatActivity;

import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.androidnetworking.AndroidNetworking;
import com.androidnetworking.common.Priority;
import com.androidnetworking.error.ANError;
import com.androidnetworking.interfaces.JSONObjectRequestListener;
import com.androidnetworking.interfaces.StringRequestListener;
import com.opensissas.R;
import com.opensissas.others.parser.PostJsonDataParser;
import com.opensissas.others.utility.AESHelper;
import com.opensissas.others.utility.AppData;
import com.opensissas.others.utility.CryptLib;
import com.opensissas.others.utility.Pref;
import com.opensissas.others.utility.Util;
import com.opensissas.ui.teacher.activity.TeacherDashboardActivity;
import com.scottyab.aescrypt.AESCrypt;
import com.tozny.crypto.android.AesCbcWithIntegrity;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.UnsupportedEncodingException;
import java.security.GeneralSecurityException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

public class LoginActivity extends AppCompatActivity implements View.OnClickListener {
    EditText etWebAddress,etEmail,etPassword;
    TextView tvSubmit,tvLogin,tvForgotUser,tvUrl;
    LinearLayout lnWebAddress,lnLogin;
    JSONObject jsonObject=new JSONObject();
    Pref pref;
    private static String EXAMPLE_PASSWORD = "oPen$!$.b14Ca5898a4e4133b!";
    AesCbcWithIntegrity.SecretKeys key ;
    String salt;
    String chipherText;
    String passwordEncrypted;
    ProgressDialog PD;
    LinearLayout lnEdit;
    String d;
    String mainURL;
    String decrypttext;
    ImageView imgLogo;
    LinearLayout lnLogo;
    TextView tvSchool;
    LinearLayout llError;
    TextView tvTryAgain;
    String school;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
    }

    private void initView(){
        pref=new Pref(LoginActivity.this);
        tvSchool=(TextView)findViewById(R.id.tvSchool);
        imgLogo=(ImageView)findViewById(R.id.imgLogo);
        etWebAddress=(EditText)findViewById(R.id.etWebAddress);
        etWebAddress.setText(pref.getEnteredURL());
        etEmail=(EditText)findViewById(R.id.etEmail);
        etEmail.setText(pref.getEmail());
        etPassword=(EditText)findViewById(R.id.etPassword);
        etPassword.setText(pref.getPasswordWithoutEncrypt());

        lnEdit=(LinearLayout)findViewById(R.id.lnEdit);
        lnLogo=(LinearLayout)findViewById(R.id.lnLogo);
        lnEdit.setOnClickListener(this);

        tvSubmit=(TextView)findViewById(R.id.tvSubmit);
        tvLogin=(TextView)findViewById(R.id.tvLogin);
        tvForgotUser=(TextView)findViewById(R.id.tvForgotUser);
        tvUrl=(TextView)findViewById(R.id.tvUrl);
        tvTryAgain=(TextView)findViewById(R.id.tvTryAgain);


        lnWebAddress=(LinearLayout)findViewById(R.id.lnWebAddress);
        lnLogin=(LinearLayout)findViewById(R.id.lnLogin);
        llError=(LinearLayout)findViewById(R.id.llError);

        tvSubmit.setOnClickListener(this);
        tvLogin.setOnClickListener(this);
        tvTryAgain.setOnClickListener(this);

        PD=new ProgressDialog(LoginActivity.this);
        PD.setMessage("Loading");

        String password="oPen$!$.b14Ca5898a4e4133b!";
        String text="Darcy@123";


       // String password = "oPen$!$b14Ca5898a4e4133b!456k42g";
       // String encryptedMsg = "";





    }

    @Override
    public void onClick(View view) {
        if (view==tvSubmit){
            if (etWebAddress.getText().toString().length()>0) {
                if (etWebAddress.getText().toString().contains("https://")){
                    lnWebAddress.setVisibility(View.GONE);
                    lnLogin.setVisibility(View.VISIBLE);
                    tvUrl.setText(etWebAddress.getText().toString());
                    pref.saveEnteredURL(etWebAddress.getText().toString());

                    String withoutHttp = etWebAddress.getText().toString().replace("https://", "").replace("/","");
                    String[] spliturl = withoutHttp.split("\\.");
                    String tenantName = spliturl[0];
                    pref.saveTenatName(tenantName);
                    String api="https://"+withoutHttp+"/assets/config.json";
                    configJSON(api);
                }else {
                    Toast.makeText(LoginActivity.this,"Please Enter Valid Web URL",Toast.LENGTH_SHORT).show();
                }


            }else {
                Toast.makeText(LoginActivity.this,"Please Enter Web URL",Toast.LENGTH_SHORT).show();
            }


        }else if (view==tvLogin){
            if (etEmail.getText().toString().length()>0){
                if (etPassword.getText().toString().length()>0){

                   // getPassword(etPassword.getText().toString());

                    byte[] data = new byte[0];
                    try {
                        data = etPassword.getText().toString().trim().getBytes("UTF-8");
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                    String base64 = Base64.encodeToString(data, Base64.DEFAULT).trim();
                    try {
                        jsonObject.put("tenantId",pref.getTenatID());
                        jsonObject.put("userId",0);
                        jsonObject.put("_tenantName",pref.getTenatName());
                        jsonObject.put("password",base64);
                        //jsonObject.put("password","ynOJExCYiaMP1cm+7C2T5A==");
                        jsonObject.put("email",etEmail.getText().toString());
                        jsonObject.put("schoolId",null);
                        jsonObject.put("_userName","");
                        jsonObject.put("_token",null);
                        jsonObject.put("isMobileLogin",true);
                        login(jsonObject);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }






                }else {
                    Toast.makeText(LoginActivity.this,"Please Enter Password",Toast.LENGTH_LONG).show();

                }

            }else {
                Toast.makeText(LoginActivity.this,"Please Enter Email Address",Toast.LENGTH_LONG).show();
            }

        }else if (view==lnEdit){
            lnWebAddress.setVisibility(View.VISIBLE);
            lnLogin.setVisibility(View.GONE);

        }else if (view==tvTryAgain){
            lnWebAddress.setVisibility(View.VISIBLE);
            lnLogin.setVisibility(View.GONE);
            llError.setVisibility(View.GONE);
            etWebAddress.setText("");

        }
    }

    public void login(JSONObject jsonObject) {
        PD.show();
        String url=pref.getAPI()+"User/ValidateLogin";

        new PostJsonDataParser(LoginActivity.this, Request.Method.POST, url,jsonObject, false,true, new PostJsonDataParser.OnGetResponseListner() {
            @Override
            public void onGetResponse(JSONObject response) {
                if (response != null) {
                    Log.d("loginresponse",response.toString());
                    try {
                        boolean _failure = response.optBoolean("_failure");
                        if (_failure){
                            PD.dismiss();

                            Toast.makeText(LoginActivity.this,"Invalid Login Credentials",Toast.LENGTH_LONG).show();

                        }else {
                            PD.dismiss();
                            int schoolId=response.optInt("schoolId");
                            pref.saveSchoolID(schoolId);
                            int userId=response.optInt("userId");
                            pref.saveUserID(userId);
                            int membershipId=response.optInt("membershipId");
                            pref.saveMemberShipID(membershipId);
                            String name=response.optString("name");
                            pref.saveName(name);
                            String tenantId=response.optString("tenantId");
                            AppData.tenatID=tenantId;
                            String firstGivenName=response.optString("firstGivenName");
                            String lastFamilyName=response.optString("lastFamilyName");
                            String memberFullName=firstGivenName+" "+lastFamilyName;
                            pref.saveMemberName(memberFullName);
                            String _token=response.optString("_token");
                            pref.saveToken(_token);
                            pref.saveEmail(etEmail.getText().toString());
                            pref.savePasswordWithoutEncrypt(etPassword.getText().toString());
                            String membershipName=response.optString("membershipName");
                            pref.saveMemberShip(membershipName);
                            String userPhoto= Util.getFreshValue(response.optString("userPhoto"),"");
                            pref.saveUserPhoto(userPhoto);
                            Intent intent=new Intent(LoginActivity.this, TeacherDashboardActivity.class);
                            intent.putExtra("token",_token);
                            intent.putExtra("school",school);
                            startActivity(intent);
                            finish();
                            pref.savePassword(etPassword.getText().toString());
                            pref.saveEmail(etEmail.getText().toString());





                        }






                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });


    }
    public void configJSON(String apiurl) {
        PD.show();


        AndroidNetworking.post(apiurl)
                .addJSONObjectBody(null) // posting json
                .setTag("test")
                .setPriority(Priority.MEDIUM)
                .build()
                .getAsJSONObject(new JSONObjectRequestListener() {
                    @Override
                    public void onResponse(JSONObject response) {
                        if (response != null) {
                            Log.d("loginresponse", response.toString());
                            PD.dismiss();
                            try {
                                boolean _failure = response.optBoolean("_failure");
                                if (_failure) {


                                    Toast.makeText(LoginActivity.this, "Invalid Login Credentials", Toast.LENGTH_LONG).show();

                                } else {
                                    PD.dismiss();
                                    String apiURL = response.optString("apiURL");
                                    String apiurl = apiURL + pref.getTenatName() + "/";
                                    Log.d("apiurl", apiurl);
                                    pref.saveAPI(apiurl);

                                    JSONObject tenantobj = new JSONObject();
                                    tenantobj.put("id", 0);
                                    tenantobj.put("tenantName", pref.getTenatName());
                                    tenantobj.put("isActive", false);
                                    tenantobj.put("tenantFooter", "");
                                    JSONObject mainOBJ = new JSONObject();
                                    mainOBJ.put("tenant", tenantobj);
                                    mainOBJ.put("IsMobileLogin", true);
                                    tenantLogo(mainOBJ, apiURL);


                                }


                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }

                    @Override
                    public void onError(ANError anError) {

                        PD.dismiss();
                    }
                });

    }

    public void tenantLogo(JSONObject jsonObject,String apiurl) {
        PD.show();
        String url=apiurl+"api/CatalogDB/getAvailableTenantDetails";

        AndroidNetworking.post(url)
                .addJSONObjectBody(jsonObject) // posting json
                .setTag("test")
                .setPriority(Priority.MEDIUM)
                .build()
                .getAsString(new StringRequestListener() {
                    @Override
                    public void onResponse(String response) {
                        PD.dismiss();
                        Log.d("riku",response);
                        byte[] data = Base64.decode(response, Base64.DEFAULT);
                        try {
                             decrypttext = new String(data, "UTF-8");
                        } catch (UnsupportedEncodingException e) {
                            e.printStackTrace();
                        }


                        try {
                            JSONObject obj=new JSONObject(decrypttext);
                            boolean Failure=obj.optBoolean("Failure");
                            if (Failure){
                                lnLogin.setVisibility(View.GONE);
                                lnWebAddress.setVisibility(View.GONE);
                                llError.setVisibility(View.VISIBLE);
                                Toast.makeText(LoginActivity.this,"We can’t find the school that you are looking for",Toast.LENGTH_LONG).show();
                            }else {
                                JSONObject tenant=obj.optJSONObject("tenant");
                                String TenantId=tenant.optString("TenantId");
                                pref.saveTenatID(TenantId);
                                String TenantFavIcon=tenant.optString("TenantFavIcon");
                                pref.saveLogo(TenantFavIcon);

                                String TenantLogo=tenant.optString("TenantLogo");
                                lnLogo.setVisibility(View.VISIBLE);
                                byte[] decodedString = Base64.decode(TenantLogo, Base64.DEFAULT);
                                Bitmap decodedByte = BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length);
                                imgLogo.setImageBitmap(decodedByte);

                                String SchoolName=tenant.optString("SchoolName");
                                tvSchool.setText(SchoolName);
                                school=SchoolName;


                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                        // do anything with response
                    }
                    @Override
                    public void onError(ANError error) {
                        PD.dismiss();
                        // handle error
                    }
                });
    }





    public void avilableJSon(String api) {
        PD.show();
        new PostJsonDataParser(LoginActivity.this, Request.Method.POST, api,null, false,true, new PostJsonDataParser.OnGetResponseListner() {
            @Override
            public void onGetResponse(JSONObject response) {
                if (response != null) {
                    Log.d("loginresponse",response.toString());
                    try {
                        boolean _failure = response.optBoolean("_failure");
                        if (_failure){
                            PD.dismiss();

                            Toast.makeText(LoginActivity.this,"Invalid Login Credentials",Toast.LENGTH_LONG).show();

                        }else {
                            PD.dismiss();
                            String apiURL=response.optString("apiURL");
                            String apiurl=apiURL+pref.getTenatName()+"/";
                            Log.d("apiurl",apiurl);
                            pref.saveAPI(apiurl);

                            JSONObject tenantobj=new JSONObject();
                            tenantobj.put("id",0);
                            tenantobj.put("tenantName",pref.getTenatName());
                            tenantobj.put("isActive",false);
                            tenantobj.put("tenantFooter","");
                              JSONObject mainOBJ=new JSONObject();
                              mainOBJ.put("tenant",tenantobj);
                              mainOBJ.put("IsMobileLogin",true);
                              tenantLogo(mainOBJ,apiURL);


                        }






                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });


    }














}